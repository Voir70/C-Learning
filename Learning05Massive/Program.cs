//Массивы в C#
В данной статье мы разберем основы работы с массивами в C#: их свойства и базовые операции, которые можно над ними выполнять.
Массивы используются для хранения нескольких значений одного типа в переменной с одним названием. 
//Чтобы объявить массив, необходимо определить тип переменной, и сразу после него указать квадратные скобки:
string[] firms;
Вот таким образом мы объявили переменную, которая содержит массив строк.

//Чтобы добавить значения в массив, мы можем использовать литерал массива - список значений, разделенный запятыми, внутри фигурных скобок:
string[] firms = {"Yandex", "Google", "Apple", "Amazon"};

//Чтобы создать массив из целых чисел, можно написать:
int[] ages = { 8, 12, 21, 42 };

//Доступ к элементам массива
Для того, чтобы получить доступ к определенному элементу массива, необходимо использовать его индекс, передав значение индекса в квадратные скобки. При этом, надо учитывать, что индексы массива начинаются с 0: [0] - это первый элемент. [1] - это второй элемент и т. д.
string[] firms = {"Yandex", "Google", "Apple", "Amazon"};
Console.WriteLine(firms[0]); // Yandex

//Изменение элемента массива
firms[0] = "Mail.Ru";

string[] firms = {"Yandex", "Google", "Apple", "Amazon"};
firms[0] = "Mail.Ru";
Console.WriteLine(firms[0]);

//Длина массива
Чтобы узнать, сколько элементов содержит массив в C#, нужно использовать свойство Length:

string[] firms = {"Yandex", "Google", "Apple", "Amazon"};
Console.WriteLine(firms.Length); // 4

//Цикл по массиву
По всем элементам массива в C# можно пройтись с помощью цикла for, используя свойство Length как ограничивающее условие.
В следующем примере выводятся все элементы массива cars:

string[] firms = {"Yandex", "Google", "Apple", "Amazon"};
int firmsLen = firms.Length;

for (int i = 0; i < firmsLen; i++)
{
  Console.WriteLine(firms[i]);
}

//Цикл foreach
Существует также цикл foreach, который используется исключительно для перебора элементов в массиве: У него следующий синтаксис:

string[] firms = {"Yandex", "Google", "Apple", "Amazon"};

foreach (string firm in firms)
{
  Console.WriteLine(firm);
}

Если вы сравните цикл for и цикл foreach, то увидите, что цикл foreach проще писать, он не требует счетчика (c использованием свойства Length) и более читаем, поэтому, его стоит использовать настолько часто, насколько возможно.

//Сортировка Массивов
У массивов существует множество методов, один из них - Sort(), который сортирует массив по алфавиту или в порядке возрастания:

string[] firms = {"Yandex", "Google", "Apple", "Amazon"};
// сортирует строки
Array.Sort(firms);

foreach (string firm in firms)
{
  Console.WriteLine(firm);
}

int[] ages = {5, 1, 8, 9};
// сортирует числа
Array.Sort(ages);

foreach (int age in ages)
{
  Console.WriteLine(age);
}

//Пространство имен System.Linq
Также наиболее общеупотребительные методы массивов есть в пространство имен System.Linq: Min, Max и Sum. Подключается это пространство имен с помощью директивы using, а методы вызываются непосредственно на переменной массива:


using System;
using System.Linq; // подключаем, для работы с массивами

namespace MyApplication
{
  class Program
  {
    static void Main(string[] args)
    {
      int[] paymenst = {500, 1200, 800, 190};
      Console.WriteLine(paymenst.Max());  // возвращает наибольшее значение
      Console.WriteLine(paymenst.Min());  // возвращает наименьшее значение
      Console.WriteLine(paymenst.Sum());  // возвращает сумму элементов

    }
  }
}

//Другие способы создания массива
В C# массивы могут быть созданы различными способами:


// Создаем  массив из четырех элементов, а значение добавляется позже
string[] firms = new string[4];

// Создаем массив из четырех элементов и сразу же добавляем значения
string[] firms = new string[4] {"Yandex", "Google", "Apple", "Amazon"};

// Создать массив из четырех элементов без указания размера
string[] firms = new string[] {"Yandex", "Google", "Apple", "Amazon"};

// Создаем массив из четырех элементов, без ключевого слова new и не указывая размер
string[] firms = {"Yandex", "Google", "Apple", "Amazon"};

Однако заметьте, что если вы сначала объявите переменную, которая будет содержать массив, а инициализируете ее позже, то Вам придется использовать ключевое слово new:


// Объявить массив
string[] firms;

// Добавить значения, используя new
firms = new string[] {"Yandex", "Google", "Apple", "Amazon"};

// так не получится - вызовет ошибку
firms = {"Yandex", "Google", "Apple", "Amazon"};

Таким образом, Вы познакомились с основными особенностями массивов в C#.

//Многомерные массивы

До сих пор мы рассматривали одномерные массивы. Но массивы в C# могут иметь более одного измерения. И в сегодняшней статье мы рассмотрим что это означает на практике?
Одномерные массивы полезны для представления данных, выраженных таким образом, чтобы каждое значение было связано с одним индексом.
Например, предположим, вам нужно сохранить среднюю температуру за последние 30 дней. Вы могли бы создать массив double из 30 элементов.
Вам просто нужно быть осторожным и не забывать, что индексы массивов основаны на нуле, поэтому для доступа к первому значению вам придется использовать индекс 0 и так далее.
Но что, если вам нужно было хранить среднесуточную температуру в течение целого года?
Конечно, вы могли бы использовать массив из 365 (или 366) элементов, но это немного усложнило бы получение результата за определенный день. Возможно, лучшим подходом было бы использовать многомерный массив.

//Пример Многомерных массивов

//Взгляните на следующий пример:

double[,] temperatures = new double[12, 31];


Строка выше создает многомерный массив, размеры которого равны 12 и 31. Визуально это помогает представить это как таблицу (или матрицу) с 12 строками и 31 столбцом.
Чтобы присвоить значение нашему многомерному массиву, нам нужно использовать оба индекса.
//В следующем примере мы назначаем среднюю температуру на 15 января:

temperatures[0, 14] = 15;

Вы также можете объявить массив, опустив его ранг, который затем будет выведен в правой части объявления:

int[,] multi = { { 1, 1 }, { 2, 3 }, { 5, 8 }, { 13, 21 } };

Имейте в виду, что, хотя мы используем двумерные массивы для наших примеров, вы не ограничены этим числом измерений. Вы можете легко использовать массивы с тремя, четырьмя или более измерениями.
Наконец, как мы проходим через многомерный массив?
Таким же образом мы проходим через одномерный цикл: используя for или foreach. Единственное отличие состоит в том, что в случае многомерных массивов вам потребуется n вложенных структур для каждого, где n - количество измерений массива.
Массивы являются одной из основных структур данных в языке C#. Тем не менее, они действительно увлекательны, когда вы вникаете в то, что делает их особенными и очень полезными в ваших приложениях. Эффективно используйте массивы, и вы сможете построить что угодно.
