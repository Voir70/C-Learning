/*Синтаксис оператора цикла for немного сложнее по сравнению с тем,
как описываются операторы цикла while и do-while. Описание оператора
цикла начинается с ключевого слова for. В круглых скобках после
ключевого слова размещается три блока инструкций. Блоки инструкций
разделяются точкой с запятой, а инструкции внутри блока - запятыми.
Затем указывается блок команд в фигурных скобках. Они формируют
тело оператора цикла.
 //НА ЗАМЕТКУ
Если тело оператора цикла содержит всего одну команду, то фигурные
скобки можно не использовать.
  Выполняется оператор цикла for следующим образом. Сначала выполняются
команды в первом блоке (в круглых скобках после ключевого
слова for). Эти команды выполняются один и только один раз в самом
начале работы оператора цикла. Поэтому в первый блок обычно помещают
команды, имеющие отношение к инициализации переменных,
а сам блок нередко называют блоком инициализации. Во втором блоке
размещается условие, поэтому второй блок обычно называют блоком условия.
Это условие проверяется сразу после выполнения команд в первом
блоке. Если условие ложно, то на этом выполнение оператора цикла
заканчивается. Если условие истинно, то выполняются команды в теле
оператора цикла. После этого выполняются команды в третьем блоке.
Затем проверяется условие во втором блоке. Если условие ложно, работа
оператора цикла прекращается . Если условие истинно, то выполняются
команды в теле оператора цикла, затем в третьем блоке и снова
проверяется условие. И так далее.*/
  //НА ЗАМЕТКУ
/* В третьем блоке обычно размещается команда, которой изменяется
значение индексной переменной . Поэтому третий блок иногда называют
блоком инкремента/декремента .*/
    //Использование оператора цикла for

// Количество слагаемых в сумме, индексная
// переменная и значение суммы:
int n=lO, k, s=O;
// Отображение сообщения:
Console.Write("Cyммa 1 + 3 + 5 +.. . + {О} = ",2*n-1);
// Оператор цикла:
for(k=l; k<=n; k++) {
s+=2*k-1; // Добавляем слагаемое в сумму
}
// Отображение вычисленного значения:
Console.WriteLine(s);

  //Второй пример использования оператора цикла for

 int n=l0, s=0;
Console.Write("Cyммa 1 + 3 + 5 +.. . + (0) = ",2*n-1);
for(int k=l; k<=n; k++) {
s+=2*k-1;
}
Console.WriteLine(s); 

   //Третий пример использования оператора цикла for

int n=lO, k, s;
Console.Write("Cyммa 1 + 3 + 5 +.. . + (0) = ",2*n-1);
for(k=l, s=O; k<=n; s+=2*k-1, k++);
Console.WriteLine(s);

   //Четвертый пример использования оператора цикла for
//два блока (первый и третий) в fоr-инструкции
//оператора цикла пустые.
int n=l0, k=l, s=0;
Console.Write("Cyммa 1 + 3 + 5 +.. . + (0) = ",2*n-1);
for(; k<=n;) {
s+=2*k-1;
k++;
}
Console.WriteLine(s);  

   //Пятый пример использования оператора цикла for
//В этой программе в операторе цикла for все три
//блока (включая второй блок с условием) являются пустыми.
int n=l0, k=l, s=0;
Console.Write("Cyммa 1 + 3 + 5 +.. . + (0) = ",2*n-1);
for (;;) { // Все блоки пустые
s+=2*k-1;
k++;
// Условный оператор:
if(k>n) break; // Завершение оператора цикла
}
Console.WriteLine(s); 

  //ПОДРОБНОСТИ
/*Если тело оператора цикла пустое, то мы можем либо поставить точку
с запятой после fоr-инструкции, либо поставить пустые фигурные
скобки. Если ничего этого не сделать, то к оператору цикла будет
относиться следующая (после оператора цикла) команда в программе-
в данном случае это была бы команда Console. WriteLine (s).*/

//Цикл for.

//Является родственным циклу while, но применяется при заранее известном условии. Это может быть повторение числа, строки, символов n-количество раз.

// C# program to illustrate for loop.
using System;

class forLoopDemo
{
    public static void Main()
    {

        for (int x = 1; x <= 4; x++)
            Console.WriteLine("Myrusakov");
    }
}