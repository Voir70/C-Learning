Преобразованием типов в C# - это операция назначения переменной одного типа переменной другого типа.

В С# есть два вида преобразований:
неявное преобразование (автоматическое) - преобразованием меньше по размеру типа данных в больший: char -> int -> long -> float -> double

явное преобразование (ручное) - обратное предыдущему преобразование большего типа в меньший: double -> float -> long -> int -> char

//Неявное преобразование
Неявное преобразование осуществляется автоматически при назначении переменной с меньшим типом данных большему:


int num = 5;
double dnum = num;       // Автоматическое преобразование: int в double

Console.WriteLine(num);    // 9
Console.WriteLine(dnum);   // 9
//Явное преобразование
Данный тип преобразования должен быть выполнен вручную. Для этого перед преобразуемой переменной в круглых скобках указываем желаемый тип, в который должна быть преобразована переменная исходного типа:


double dnum = 5.23;
int inum = (int) dnum;    // Ручное преобразование: double в int

Console.WriteLine(dnum);   // 9.78
Console.WriteLine(inum);   // 9 - остается только целая часть, дробная отбрасывается
В последнем примере показан один из типов преобразования, но кроме него в C# также существуют другой способ явного преобразования типов с помощью методов встроенного класса Convert.


// преобразования

Convert.ToInt32 (int)   // в тип int
Convert.ToInt64 (long)  // в тип long
Convert.ToDouble        // в тип double
Convert.ToBoolean       // в тип boolean
Convert.ToString        // в строку
//Примеры использования класса Convert

int inum = 10;
double dnum = 5.25;
bool boolValue = true;

Console.WriteLine(Convert.ToString(inum));       // int в string
Console.WriteLine(Convert.ToDouble(inum));       // int в double
Console.WriteLine(Convert.ToInt32(dnum));        // double в int
Console.WriteLine(Convert.ToString(boolValue));  // bool в strin
Таким образом, преобразования типов помогаю нам получить нужный в конкретной ситуации тип данных. 
Некоторые из них происходят неявно, некоторые мы сами должны выполнить явно - но в любом случае хорошее понимание данной особенности необходимо, 
так позволит быстрее решать проблемы типов в C# в дальнейшем.

//Как получить вводимые пользователем в консоль данные в C#?
Данный метод называется - Console.ReadLine().

//В примере далее мы предоставим пользователю возможность ввести свое имя, 
//которое будет сохранено в переменной uname. А затем просто напечатаем это имя обратно в консоль с некоторым дополнительным текстом.

// Пишем имя и нажимаем кнопку Enter
Console.WriteLine("Введите Ваше имя: ");

// считываем и сохраняем введенное пользователем имя в строковой переменной uname
string uname = Console.ReadLine();

// печатаем обратно на экране имя пользователя с некоторым опциональным текстом
// как видите конкатенация (соединения строк) в C# производится с помощью знака + (как и в Java и JavaScript)
Console.WriteLine("Здравствуйте, " + uname + "!");
//Как считать число из консоли в C#?
Метод Console.ReadLine(), который мы использовали выше всегда возвращает строку, даже, если Вам нужно число, например. Но как же быть, если нам, например, понадобится получить возраст пользователя, который должен быть представлен числом?

Давайте, посмотрим на пример далее:

Console.WriteLine("Введите Ваш возвраст: ");  // 1

// считываем и сохраняем введенный пользователем возраст в переменную
int uage = Console.ReadLine(); // 2

// печатаем возраст в консоль и получаем...
Console.WriteLine("Здравствуйте, Вам: " + uage); // 3

// ошибку - Невозможно неявно преобразовать тип 'string' в 'int'на строке 2
Причина в том, что язык C# - язык со строгой статической типизацией, поэтому чтобы получить число из строки, нам необходимо самостоятельно преобразовать строку в число. 
Для этого в C# есть встроенный класс Convert, который содержит методы для явного преобразования типов.

//Итак, посмотрим, как получить числовое представление возраста пользователя из строки ввода:
Console.WriteLine("Введите Ваш возраст: ");  // 1

// считываем и сохраняем введенный пользователем возраст в переменную, предварительно преобразовав ее в число
int uage = Convert.ToInt32(Console.ReadLine()); // 2

// печатаем возраст в консоль
Console.WriteLine("Здравствуйте, Вам: " + uage); // 3
В примере выше код сработает как ожидается, однако если вместо числа будет введена строка, 
то будет брошено исключение System.FormatException, сигнализирующее о том, что введенное значение некорректно.

//Об исключениях в C# мы поговорим в следующих статьях, а здесь просто рассмотрим пример, как можно обработать исключение, и вывести некоторое корректное значение без аварийного завершения программы:
Console.WriteLine("Введите Ваш возраст: ");  // 1

// устанавливаем значение по умолчанию
int uage = 0;

try  // пытаемся выполнить код, который может выбросить ошибку
{
    // считываем и сохраняем введенный пользователем возраст в переменную, предварительно преобразовав ее в число
    uage = Convert.ToInt32(Console.ReadLine()); // 2
}
catch (System.FormatException){} // если получили ошибку, то просто ничего не делаем, значение переменной uage - неизменно

// печатаем возраст в консоль
Console.WriteLine("Здравствуйте, Вам: " + uage); // 3
В примере выше, даже после ввода некорректного значения в консоли, программа продолжит работу.

Таким образом, работа с пользовательским вводом в C# - это один из базовых навыков, которым надо овладеть в первую очередь.